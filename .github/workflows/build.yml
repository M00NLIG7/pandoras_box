name: Build Chimera Binary

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always
  APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
  CI: true

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Verify Password Configuration
      run: |
        if [ -z "$APP_PASSWORD" ]; then
          echo "Error: APP_PASSWORD secret is not configured"
          exit 1
        fi
    
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Create Git Tag
      run: |
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        draft: false
        prerelease: false
    
    - name: Install Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: i686-unknown-linux-musl,x86_64-pc-windows-gnu
    
    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross
    
    # Linux Build
    - name: Build Linux Target
      env:
        APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
        RUST_LOG: debug
      run: |
        cd chimera
        # Remove any existing .password file
        rm -f .password
        # Create new .password from APP_PASSWORD
        echo "$APP_PASSWORD" > .password
        cross build --target i686-unknown-linux-musl --release
        mkdir -p release-artifacts
        cp ../target/i686-unknown-linux-musl/release/chimera release-artifacts/chimera
        # Clean up password file
        rm -f .password
    
    - name: Verify Linux Build Output
      run: |
        ls -l chimera/release-artifacts
        if [ ! -f chimera/release-artifacts/chimera ]; then
          echo "Error: Linux build failed to produce binary"
          exit 1
        fi
    
    # Windows Build
    - name: Build Windows Target
      env:
        APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
        RUST_LOG: debug
      run: |
        cd chimera
        # Remove any existing .password file
        rm -f .password
        # Create new .password from APP_PASSWORD
        echo "$APP_PASSWORD" > .password
        cross build --target x86_64-pc-windows-gnu --release
        mkdir -p release-artifacts
        cp ../target/x86_64-pc-windows-gnu/release/chimera.exe release-artifacts/chimera.exe
        # Clean up password file
        rm -f .password
    
    - name: Verify Windows Build Output
      run: |
        ls -l chimera/release-artifacts
        if [ ! -f chimera/release-artifacts/chimera.exe ]; then
          echo "Error: Windows build failed to produce binary"
          exit 1
        fi
    
    # Upload artifacts
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: chimera/release-artifacts/chimera
        asset_name: chimera
        asset_content_type: application/octet-stream
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: chimera/release-artifacts/chimera.exe
        asset_name: chimera.exe
        asset_content_type: application/octet-stream

    # Final cleanup
    - name: Cleanup
      if: always()
      run: |
        cd chimera
        rm -f .password
