use rustrc::client::{Client, Config, Command, CommandOutput};
use crate::enumerator::Host;

pub struct Communicator {
    clients: Vec<Box<dyn ClientWrapper>>,
}

trait ClientWrapper: Send {
    fn disconnect(&mut self) -> impl std::future::Future<Output = crate::Result<()>> + Send;
    fn exec(&self, cmd: Command) -> impl std::future::Future<Output = crate::Result<CommandOutput>> + Send;
}

impl<T: Config + Send + 'static> ClientWrapper for Client<T> {
    fn disconnect(&mut self) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        Box::pin(async move {
            self.disconnect().await
        })
    }

    fn exec(&self, cmd: Command) -> impl std::future::Future<Output = crate::Result<CommandOutput>> + Send {
        Box::pin(async move {
            self.exec(cmd).await
        })
    }
}

impl Communicator {
    pub async fn new<F, Fut, T>(hosts: Vec<Host>, config_factory: F) -> crate::Result<Self>
    where
        F: Fn(Host) -> Fut,
        Fut: std::future::Future<Output = crate::Result<T>>,
        T: Config + Send + 'static,
    {
        let mut clients = Vec::new();

        for host in hosts {
            let config = config_factory(host).await?;
            let client = Client::connect(config).await?;
            clients.push(Box::new(client) as Box<dyn ClientWrapper>);
        }

        Ok(Communicator { clients })
    }

    pub async fn disconnect_all(&mut self) -> crate::Result<()> {
        for client in &mut self.clients {
            client.disconnect().await?;
        }
        Ok(())
    }

    pub async fn exec_all(&self, cmd: Command) -> Vec<crate::Result<CommandOutput>> {
        let futures = self.clients.iter().map(|client| client.exec(cmd.clone()));
        futures::future::join_all(futures).await
    }
}

// The test module remains unchanged
#[cfg(test)]
mod tests {
    // ... (test code remains the same)
}

/*
// End of the module
#[cfg(test)]
mod tests {
    use super::*;
    use crate::client::Client;
    use crate::cmd;
    use std::time::Duration;

    #[tokio::test]
    async fn test_winexe_container() {
        let socket = "139.182.180.178";
        let config =
            WinexeConfig::password("sfs15-ultron", socket, "sfs15", Duration::from_secs(10))
                .await
                .unwrap();

        let client = Client::connect(config).await.unwrap();

        let output = client.exec(cmd!("echo", "TESTING")).await.unwrap();

        let str_output = String::from_utf8_lossy(&output.stdout);

        dbg!(str_output);
    }
}

*/
